/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDictionariesClient {
    getProvinces(): Observable<DictionaryValueDto[] | null>;
    getDistricts(province: string | null): Observable<DictionaryValueDto[] | null>;
    getCommunes(province: string | null, district: string | null): Observable<DictionaryValueDto[] | null>;
    getCities(province: string | null, district: string | null, commune: string | null): Observable<DictionaryValueDto[] | null>;
    getStreets(province: string | null, district: string | null, commune: string | null, city: string | null): Observable<DictionaryValueDto[] | null>;
}

@Injectable()
export class DictionariesClient implements IDictionariesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getProvinces(): Observable<DictionaryValueDto[] | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/provinces";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProvinces(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProvinces(<any>response_);
                } catch (e) {
                    return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetProvinces(response: HttpResponseBase): Observable<DictionaryValueDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DictionaryValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DictionaryValueDto[] | null>(<any>null);
    }

    getDistricts(province: string | null): Observable<DictionaryValueDto[] | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{province}";
        if (province === undefined || province === null)
            throw new Error("The parameter 'province' must be defined.");
        url_ = url_.replace("{province}", encodeURIComponent("" + province)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDistricts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDistricts(<any>response_);
                } catch (e) {
                    return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDistricts(response: HttpResponseBase): Observable<DictionaryValueDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DictionaryValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DictionaryValueDto[] | null>(<any>null);
    }

    getCommunes(province: string | null, district: string | null): Observable<DictionaryValueDto[] | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{province}/{district}";
        if (province === undefined || province === null)
            throw new Error("The parameter 'province' must be defined.");
        url_ = url_.replace("{province}", encodeURIComponent("" + province)); 
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCommunes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCommunes(<any>response_);
                } catch (e) {
                    return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCommunes(response: HttpResponseBase): Observable<DictionaryValueDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DictionaryValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DictionaryValueDto[] | null>(<any>null);
    }

    getCities(province: string | null, district: string | null, commune: string | null): Observable<DictionaryValueDto[] | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{province}/{district}/{commune}";
        if (province === undefined || province === null)
            throw new Error("The parameter 'province' must be defined.");
        url_ = url_.replace("{province}", encodeURIComponent("" + province)); 
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        if (commune === undefined || commune === null)
            throw new Error("The parameter 'commune' must be defined.");
        url_ = url_.replace("{commune}", encodeURIComponent("" + commune)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCities(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCities(<any>response_);
                } catch (e) {
                    return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCities(response: HttpResponseBase): Observable<DictionaryValueDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DictionaryValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DictionaryValueDto[] | null>(<any>null);
    }

    getStreets(province: string | null, district: string | null, commune: string | null, city: string | null): Observable<DictionaryValueDto[] | null> {
        let url_ = this.baseUrl + "/api/Dictionaries/{province}/{district}/{commune}/{city}";
        if (province === undefined || province === null)
            throw new Error("The parameter 'province' must be defined.");
        url_ = url_.replace("{province}", encodeURIComponent("" + province)); 
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        if (commune === undefined || commune === null)
            throw new Error("The parameter 'commune' must be defined.");
        url_ = url_.replace("{commune}", encodeURIComponent("" + commune)); 
        if (city === undefined || city === null)
            throw new Error("The parameter 'city' must be defined.");
        url_ = url_.replace("{city}", encodeURIComponent("" + city)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStreets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStreets(<any>response_);
                } catch (e) {
                    return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DictionaryValueDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetStreets(response: HttpResponseBase): Observable<DictionaryValueDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DictionaryValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DictionaryValueDto[] | null>(<any>null);
    }
}

export interface IMonumentsClient {
    create(command: CreateMonumentCommand): Observable<number>;
    get(monumentId: number): Observable<MonumentDto | null>;
    update(command: UpdateMonumentCommand): Observable<void>;
    delete(monumentId: number): Observable<void>;
    get2(startIndex: number, endIndex: number): Observable<MonumentsPreviewViewModel | null>;
}

@Injectable()
export class MonumentsClient implements IMonumentsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateMonumentCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Monuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(monumentId: number): Observable<MonumentDto | null> {
        let url_ = this.baseUrl + "/api/Monuments?";
        if (monumentId === undefined || monumentId === null)
            throw new Error("The parameter 'monumentId' must be defined and cannot be null.");
        else
            url_ += "MonumentId=" + encodeURIComponent("" + monumentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<MonumentDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<MonumentDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<MonumentDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MonumentDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MonumentDto | null>(<any>null);
    }

    update(command: UpdateMonumentCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Monuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(monumentId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Monuments?";
        if (monumentId === undefined || monumentId === null)
            throw new Error("The parameter 'monumentId' must be defined and cannot be null.");
        else
            url_ += "MonumentId=" + encodeURIComponent("" + monumentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    get2(startIndex: number, endIndex: number): Observable<MonumentsPreviewViewModel | null> {
        let url_ = this.baseUrl + "/api/Monuments/monuments?";
        if (startIndex === undefined || startIndex === null)
            throw new Error("The parameter 'startIndex' must be defined and cannot be null.");
        else
            url_ += "StartIndex=" + encodeURIComponent("" + startIndex) + "&"; 
        if (endIndex === undefined || endIndex === null)
            throw new Error("The parameter 'endIndex' must be defined and cannot be null.");
        else
            url_ += "EndIndex=" + encodeURIComponent("" + endIndex) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<MonumentsPreviewViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<MonumentsPreviewViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<MonumentsPreviewViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MonumentsPreviewViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MonumentsPreviewViewModel | null>(<any>null);
    }
}

export interface IPicturesClient {
    create(command: CreatePictureCommand): Observable<number>;
    deletePicture(command: DeletePictureCommand): Observable<void>;
}

@Injectable()
export class PicturesClient implements IPicturesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreatePictureCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Pictures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    deletePicture(command: DeletePictureCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Pictures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePicture(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePicture(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeletePicture(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IRecoveryClient {
    changePasswordByRecoveryKey(viewModel: ChangePasswordByRecoveryKeyCommand): Observable<void>;
    sendRecoveryKey(viewModel: SendRecoveryKeyCommand): Observable<void>;
}

@Injectable()
export class RecoveryClient implements IRecoveryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    changePasswordByRecoveryKey(viewModel: ChangePasswordByRecoveryKeyCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Recovery/reset-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePasswordByRecoveryKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePasswordByRecoveryKey(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePasswordByRecoveryKey(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    sendRecoveryKey(viewModel: SendRecoveryKeyCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Recovery/send-recovery-key";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendRecoveryKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendRecoveryKey(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendRecoveryKey(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IUsersClient {
    create(command: CreateUserCommand): Observable<number>;
    get(id: number): Observable<UserDto | null>;
    update(command: UpdateUserCommand): Observable<void>;
    delete(command: DeleteUserCommand): Observable<void>;
    getAll(): Observable<UserDto[] | null>;
    getUserStatistics(userId: number): Observable<UserStatisticsResult | null>;
    promote(command: PromoteUserCommand): Observable<void>;
    authenticate(viewModel: AuthenticateUserViewModel): Observable<AuthenticateUserResultViewModel | null>;
}

@Injectable()
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateUserCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(id: number): Observable<UserDto | null> {
        let url_ = this.baseUrl + "/api/Users?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto | null>(<any>null);
    }

    update(command: UpdateUserCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(command: DeleteUserCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getAll(): Observable<UserDto[] | null> {
        let url_ = this.baseUrl + "/api/Users/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<UserDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(UserDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDto[] | null>(<any>null);
    }

    getUserStatistics(userId: number): Observable<UserStatisticsResult | null> {
        let url_ = this.baseUrl + "/api/Users/statistics?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserStatistics(<any>response_);
                } catch (e) {
                    return <Observable<UserStatisticsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserStatisticsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserStatistics(response: HttpResponseBase): Observable<UserStatisticsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserStatisticsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserStatisticsResult | null>(<any>null);
    }

    promote(command: PromoteUserCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/promote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPromote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPromote(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPromote(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    authenticate(viewModel: AuthenticateUserViewModel): Observable<AuthenticateUserResultViewModel | null> {
        let url_ = this.baseUrl + "/api/Users/authentication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateUserResultViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateUserResultViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateUserResultViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateUserResultViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateUserResultViewModel | null>(<any>null);
    }
}

export class DictionaryValueDto implements IDictionaryValueDto {
    name?: string | undefined;

    constructor(data?: IDictionaryValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): DictionaryValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new DictionaryValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IDictionaryValueDto {
    name?: string | undefined;
}

export class CreateMonumentCommand implements ICreateMonumentCommand {
    name?: string | undefined;
    formOfProtection?: string | undefined;
    constructionDate?: Date;
    address?: AddressDto | undefined;
    pictures?: PictureDto[] | undefined;

    constructor(data?: ICreateMonumentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.formOfProtection = data["formOfProtection"];
            this.constructionDate = data["constructionDate"] ? new Date(data["constructionDate"].toString()) : <any>undefined;
            this.address = data["address"] ? AddressDto.fromJS(data["address"]) : <any>undefined;
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [];
                for (let item of data["pictures"])
                    this.pictures.push(PictureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMonumentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMonumentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["formOfProtection"] = this.formOfProtection;
        data["constructionDate"] = this.constructionDate ? this.constructionDate.toISOString() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateMonumentCommand {
    name?: string | undefined;
    formOfProtection?: string | undefined;
    constructionDate?: Date;
    address?: AddressDto | undefined;
    pictures?: PictureDto[] | undefined;
}

export class AddressDto implements IAddressDto {
    province?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    city?: string | undefined;
    street?: string | undefined;
    streetNumber?: string | undefined;
    area?: string | undefined;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.province = data["province"];
            this.district = data["district"];
            this.commune = data["commune"];
            this.city = data["city"];
            this.street = data["street"];
            this.streetNumber = data["streetNumber"];
            this.area = data["area"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["province"] = this.province;
        data["district"] = this.district;
        data["commune"] = this.commune;
        data["city"] = this.city;
        data["street"] = this.street;
        data["streetNumber"] = this.streetNumber;
        data["area"] = this.area;
        return data; 
    }
}

export interface IAddressDto {
    province?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    city?: string | undefined;
    street?: string | undefined;
    streetNumber?: string | undefined;
    area?: string | undefined;
}

export class PictureDto implements IPictureDto {
    data?: string | undefined;

    constructor(data?: IPictureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["data"];
        }
    }

    static fromJS(data: any): PictureDto {
        data = typeof data === 'object' ? data : {};
        let result = new PictureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        return data; 
    }
}

export interface IPictureDto {
    data?: string | undefined;
}

export class MonumentDto implements IMonumentDto {
    id?: number;
    ownerId?: number;
    ownerName?: string | undefined;
    name?: string | undefined;
    constructionDate?: Date;
    address?: AddressDto | undefined;
    picture?: string | undefined;

    constructor(data?: IMonumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ownerId = data["ownerId"];
            this.ownerName = data["ownerName"];
            this.name = data["name"];
            this.constructionDate = data["constructionDate"] ? new Date(data["constructionDate"].toString()) : <any>undefined;
            this.address = data["address"] ? AddressDto.fromJS(data["address"]) : <any>undefined;
            this.picture = data["picture"];
        }
    }

    static fromJS(data: any): MonumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new MonumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerId"] = this.ownerId;
        data["ownerName"] = this.ownerName;
        data["name"] = this.name;
        data["constructionDate"] = this.constructionDate ? this.constructionDate.toISOString() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["picture"] = this.picture;
        return data; 
    }
}

export interface IMonumentDto {
    id?: number;
    ownerId?: number;
    ownerName?: string | undefined;
    name?: string | undefined;
    constructionDate?: Date;
    address?: AddressDto | undefined;
    picture?: string | undefined;
}

export class MonumentsPreviewViewModel implements IMonumentsPreviewViewModel {
    monuments?: MonumentPreviewDto[] | undefined;
    pagesCount?: number;

    constructor(data?: IMonumentsPreviewViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["monuments"] && data["monuments"].constructor === Array) {
                this.monuments = [];
                for (let item of data["monuments"])
                    this.monuments.push(MonumentPreviewDto.fromJS(item));
            }
            this.pagesCount = data["pagesCount"];
        }
    }

    static fromJS(data: any): MonumentsPreviewViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MonumentsPreviewViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.monuments && this.monuments.constructor === Array) {
            data["monuments"] = [];
            for (let item of this.monuments)
                data["monuments"].push(item.toJSON());
        }
        data["pagesCount"] = this.pagesCount;
        return data; 
    }
}

export interface IMonumentsPreviewViewModel {
    monuments?: MonumentPreviewDto[] | undefined;
    pagesCount?: number;
}

export class MonumentPreviewDto implements IMonumentPreviewDto {
    id?: number;
    ownerId?: number;
    ownerName?: string | undefined;
    name?: string | undefined;
    constructionDate?: Date;
    picture?: string | undefined;

    constructor(data?: IMonumentPreviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ownerId = data["ownerId"];
            this.ownerName = data["ownerName"];
            this.name = data["name"];
            this.constructionDate = data["constructionDate"] ? new Date(data["constructionDate"].toString()) : <any>undefined;
            this.picture = data["picture"];
        }
    }

    static fromJS(data: any): MonumentPreviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new MonumentPreviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerId"] = this.ownerId;
        data["ownerName"] = this.ownerName;
        data["name"] = this.name;
        data["constructionDate"] = this.constructionDate ? this.constructionDate.toISOString() : <any>undefined;
        data["picture"] = this.picture;
        return data; 
    }
}

export interface IMonumentPreviewDto {
    id?: number;
    ownerId?: number;
    ownerName?: string | undefined;
    name?: string | undefined;
    constructionDate?: Date;
    picture?: string | undefined;
}

export class UpdateMonumentCommand implements IUpdateMonumentCommand {
    monumentId?: number;
    name?: string | undefined;
    formOfProtection?: string | undefined;
    constructionDate?: Date;
    address?: AddressDto | undefined;

    constructor(data?: IUpdateMonumentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.monumentId = data["monumentId"];
            this.name = data["name"];
            this.formOfProtection = data["formOfProtection"];
            this.constructionDate = data["constructionDate"] ? new Date(data["constructionDate"].toString()) : <any>undefined;
            this.address = data["address"] ? AddressDto.fromJS(data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateMonumentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMonumentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monumentId"] = this.monumentId;
        data["name"] = this.name;
        data["formOfProtection"] = this.formOfProtection;
        data["constructionDate"] = this.constructionDate ? this.constructionDate.toISOString() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUpdateMonumentCommand {
    monumentId?: number;
    name?: string | undefined;
    formOfProtection?: string | undefined;
    constructionDate?: Date;
    address?: AddressDto | undefined;
}

export class CreatePictureCommand implements ICreatePictureCommand {
    monumentId?: number;
    data?: string | undefined;

    constructor(data?: ICreatePictureCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.monumentId = data["monumentId"];
            this.data = data["data"];
        }
    }

    static fromJS(data: any): CreatePictureCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePictureCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monumentId"] = this.monumentId;
        data["data"] = this.data;
        return data; 
    }
}

export interface ICreatePictureCommand {
    monumentId?: number;
    data?: string | undefined;
}

export class DeletePictureCommand implements IDeletePictureCommand {
    pictureId?: number;

    constructor(data?: IDeletePictureCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pictureId = data["pictureId"];
        }
    }

    static fromJS(data: any): DeletePictureCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePictureCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pictureId"] = this.pictureId;
        return data; 
    }
}

export interface IDeletePictureCommand {
    pictureId?: number;
}

export class ChangePasswordByRecoveryKeyCommand implements IChangePasswordByRecoveryKeyCommand {
    recoveryKey?: string | undefined;
    password?: string | undefined;

    constructor(data?: IChangePasswordByRecoveryKeyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.recoveryKey = data["recoveryKey"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): ChangePasswordByRecoveryKeyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordByRecoveryKeyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recoveryKey"] = this.recoveryKey;
        data["password"] = this.password;
        return data; 
    }
}

export interface IChangePasswordByRecoveryKeyCommand {
    recoveryKey?: string | undefined;
    password?: string | undefined;
}

export class SendRecoveryKeyCommand implements ISendRecoveryKeyCommand {
    email?: string | undefined;

    constructor(data?: ISendRecoveryKeyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): SendRecoveryKeyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendRecoveryKeyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface ISendRecoveryKeyCommand {
    email?: string | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    email?: string | undefined;
    password?: string | undefined;
    jobTitle?: string | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
            this.jobTitle = data["jobTitle"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["jobTitle"] = this.jobTitle;
        return data; 
    }
}

export interface ICreateUserCommand {
    email?: string | undefined;
    password?: string | undefined;
    jobTitle?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    role?: UserRoleDto;
    email?: string | undefined;
    jobTitle?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.role = data["role"];
            this.email = data["email"];
            this.jobTitle = data["jobTitle"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["role"] = this.role;
        data["email"] = this.email;
        data["jobTitle"] = this.jobTitle;
        return data; 
    }
}

export interface IUserDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    role?: UserRoleDto;
    email?: string | undefined;
    jobTitle?: string | undefined;
}

export enum UserRoleDto {
    User = "User", 
    Administrator = "Administrator", 
}

export class UserStatisticsResult implements IUserStatisticsResult {
    lastLoggedIn?: Date;
    createdMonuments?: number;
    lastModifiedMonument?: string | undefined;
    role?: UserRoleDto;

    constructor(data?: IUserStatisticsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastLoggedIn = data["lastLoggedIn"] ? new Date(data["lastLoggedIn"].toString()) : <any>undefined;
            this.createdMonuments = data["createdMonuments"];
            this.lastModifiedMonument = data["lastModifiedMonument"];
            this.role = data["role"];
        }
    }

    static fromJS(data: any): UserStatisticsResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserStatisticsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastLoggedIn"] = this.lastLoggedIn ? this.lastLoggedIn.toISOString() : <any>undefined;
        data["createdMonuments"] = this.createdMonuments;
        data["lastModifiedMonument"] = this.lastModifiedMonument;
        data["role"] = this.role;
        return data; 
    }
}

export interface IUserStatisticsResult {
    lastLoggedIn?: Date;
    createdMonuments?: number;
    lastModifiedMonument?: string | undefined;
    role?: UserRoleDto;
}

export class UpdateUserCommand implements IUpdateUserCommand {
    id?: number;
    password?: string | undefined;
    role?: UserRoleDto;
    jobTitle?: string | undefined;

    constructor(data?: IUpdateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.password = data["password"];
            this.role = data["role"];
            this.jobTitle = data["jobTitle"];
        }
    }

    static fromJS(data: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["password"] = this.password;
        data["role"] = this.role;
        data["jobTitle"] = this.jobTitle;
        return data; 
    }
}

export interface IUpdateUserCommand {
    id?: number;
    password?: string | undefined;
    role?: UserRoleDto;
    jobTitle?: string | undefined;
}

export class PromoteUserCommand implements IPromoteUserCommand {
    email?: string | undefined;

    constructor(data?: IPromoteUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): PromoteUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PromoteUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface IPromoteUserCommand {
    email?: string | undefined;
}

export class AuthenticateUserResultViewModel implements IAuthenticateUserResultViewModel {
    user?: UserDto | undefined;
    token?: string | undefined;

    constructor(data?: IAuthenticateUserResultViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserDto.fromJS(data["user"]) : <any>undefined;
            this.token = data["token"];
        }
    }

    static fromJS(data: any): AuthenticateUserResultViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateUserResultViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["token"] = this.token;
        return data; 
    }
}

export interface IAuthenticateUserResultViewModel {
    user?: UserDto | undefined;
    token?: string | undefined;
}

export class AuthenticateUserViewModel implements IAuthenticateUserViewModel {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAuthenticateUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): AuthenticateUserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateUserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface IAuthenticateUserViewModel {
    email?: string | undefined;
    password?: string | undefined;
}

export class DeleteUserCommand implements IDeleteUserCommand {
    id?: number;

    constructor(data?: IDeleteUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DeleteUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeleteUserCommand {
    id?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}